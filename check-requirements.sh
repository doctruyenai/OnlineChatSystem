#!/bin/bash

# ==============================================================================
# SCRIPT KI·ªÇM TRA Y√äU C·∫¶U H·ªÜ TH·ªêNG
# Ki·ªÉm tra VPS c√≥ ƒë·ªß y√™u c·∫ßu ƒë·ªÉ ch·∫°y Real-time Chat System kh√¥ng
# ==============================================================================

# M√†u s·∫Øc cho terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Bi·∫øn ƒë·∫øm
PASSED=0
FAILED=0
WARNINGS=0

# H√†m logging
pass() {
    echo -e "${GREEN}‚úì $1${NC}"
    ((PASSED++))
}

fail() {
    echo -e "${RED}‚úó $1${NC}"
    ((FAILED++))
}

warn() {
    echo -e "${YELLOW}‚ö† $1${NC}"
    ((WARNINGS++))
}

info() {
    echo -e "${BLUE}‚Ñπ $1${NC}"
}

echo -e "${BLUE}"
echo "============================================================================"
echo "    KI·ªÇM TRA Y√äU C·∫¶U H·ªÜ TH·ªêNG - REAL-TIME CHAT SYSTEM"
echo "============================================================================"
echo -e "${NC}"

# Ki·ªÉm tra h·ªá ƒëi·ªÅu h√†nh
echo -e "\n${BLUE}1. KI·ªÇM TRA H·ªÜ ƒêI·ªÄU H√ÄNH${NC}"
if grep -q "Ubuntu 20.04" /etc/os-release; then
    pass "Ubuntu 20.04 LTS"
elif grep -q "Ubuntu" /etc/os-release; then
    warn "Ubuntu $(grep VERSION_ID /etc/os-release | cut -d'"' -f2) - Khuy·∫øn ngh·ªã Ubuntu 20.04"
else
    fail "Kh√¥ng ph·∫£i Ubuntu - Script ƒë∆∞·ª£c thi·∫øt k·∫ø cho Ubuntu 20.04"
fi

# Ki·ªÉm tra quy·ªÅn sudo
echo -e "\n${BLUE}2. KI·ªÇM TRA QUY·ªÄN SUDO${NC}"
if sudo -n true 2>/dev/null; then
    pass "C√≥ quy·ªÅn sudo"
else
    fail "Kh√¥ng c√≥ quy·ªÅn sudo - C·∫ßn thi·∫øt ƒë·ªÉ c√†i ƒë·∫∑t"
fi

# Ki·ªÉm tra RAM
echo -e "\n${BLUE}3. KI·ªÇM TRA B·ªò NH·ªö RAM${NC}"
RAM_MB=$(free -m | awk 'NR==2{printf "%.0f", $2}')
if [ "$RAM_MB" -ge 4096 ]; then
    pass "RAM: ${RAM_MB}MB (Tuy·ªát v·ªùi)"
elif [ "$RAM_MB" -ge 2048 ]; then
    pass "RAM: ${RAM_MB}MB (ƒê·ªß y√™u c·∫ßu)"
elif [ "$RAM_MB" -ge 1024 ]; then
    warn "RAM: ${RAM_MB}MB (Th·∫•p, c√≥ th·ªÉ ch·∫≠m)"
else
    fail "RAM: ${RAM_MB}MB (Kh√¥ng ƒë·ªß, c·∫ßn t·ªëi thi·ªÉu 1GB)"
fi

# Ki·ªÉm tra CPU
echo -e "\n${BLUE}4. KI·ªÇM TRA CPU${NC}"
CPU_CORES=$(nproc)
if [ "$CPU_CORES" -ge 4 ]; then
    pass "CPU: ${CPU_CORES} cores (Tuy·ªát v·ªùi)"
elif [ "$CPU_CORES" -ge 2 ]; then
    pass "CPU: ${CPU_CORES} cores (ƒê·ªß y√™u c·∫ßu)"
else
    warn "CPU: ${CPU_CORES} core (Th·∫•p, khuy·∫øn ngh·ªã 2+ cores)"
fi

# Ki·ªÉm tra dung l∆∞·ª£ng ·ªï c·ª©ng
echo -e "\n${BLUE}5. KI·ªÇM TRA DUNG L∆Ø·ª¢NG ·ªî C·ª®NG${NC}"
DISK_AVAILABLE=$(df / | awk 'NR==2 {print $4}')
DISK_AVAILABLE_GB=$((DISK_AVAILABLE / 1024 / 1024))
if [ "$DISK_AVAILABLE_GB" -ge 20 ]; then
    pass "Dung l∆∞·ª£ng tr·ªëng: ${DISK_AVAILABLE_GB}GB (ƒê·ªß y√™u c·∫ßu)"
elif [ "$DISK_AVAILABLE_GB" -ge 10 ]; then
    warn "Dung l∆∞·ª£ng tr·ªëng: ${DISK_AVAILABLE_GB}GB (√çt, c·∫ßn theo d√µi)"
else
    fail "Dung l∆∞·ª£ng tr·ªëng: ${DISK_AVAILABLE_GB}GB (Kh√¥ng ƒë·ªß, c·∫ßn t·ªëi thi·ªÉu 10GB)"
fi

# Ki·ªÉm tra k·∫øt n·ªëi internet
echo -e "\n${BLUE}6. KI·ªÇM TRA K·∫æT N·ªêI INTERNET${NC}"
if ping -c 1 google.com >/dev/null 2>&1; then
    pass "K·∫øt n·ªëi internet ho·∫°t ƒë·ªông"
else
    fail "Kh√¥ng c√≥ k·∫øt n·ªëi internet"
fi

# Ki·ªÉm tra port c·∫ßn thi·∫øt
echo -e "\n${BLUE}7. KI·ªÇM TRA PORTS${NC}"
PORTS_TO_CHECK=(80 443 3000 5432)
for port in "${PORTS_TO_CHECK[@]}"; do
    if ss -tuln | grep -q ":$port "; then
        warn "Port $port ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng"
    else
        pass "Port $port c√≥ s·∫µn"
    fi
done

# Ki·ªÉm tra DNS resolution
echo -e "\n${BLUE}8. KI·ªÇM TRA DNS${NC}"
if nslookup google.com >/dev/null 2>&1; then
    pass "DNS resolution ho·∫°t ƒë·ªông"
else
    fail "L·ªói DNS resolution"
fi

# Ki·ªÉm tra timezone
echo -e "\n${BLUE}9. KI·ªÇM TRA TIMEZONE${NC}"
TIMEZONE=$(timedatectl | grep "Time zone" | awk '{print $3}')
info "Timezone hi·ªán t·∫°i: $TIMEZONE"
if [[ "$TIMEZONE" == "Asia/Ho_Chi_Minh" || "$TIMEZONE" == "UTC" ]]; then
    pass "Timezone ph√π h·ª£p"
else
    warn "Timezone kh√¥ng ph·∫£i Asia/Ho_Chi_Minh ho·∫∑c UTC"
fi

# Ki·ªÉm tra software ƒë√£ c√†i
echo -e "\n${BLUE}10. KI·ªÇM TRA PH·∫¶N M·ªÄM ƒê√É C√ÄI${NC}"
SOFTWARE_CHECK=(curl wget git)
for software in "${SOFTWARE_CHECK[@]}"; do
    if command -v $software >/dev/null 2>&1; then
        pass "$software ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    else
        warn "$software ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t (s·∫Ω ƒë∆∞·ª£c c√†i t·ª± ƒë·ªông)"
    fi
done

# Ki·ªÉm tra c√°c d·ªãch v·ª• xung ƒë·ªôt
echo -e "\n${BLUE}11. KI·ªÇM TRA XUNG ƒê·ªòT D·ªäCH V·ª§${NC}"
CONFLICTING_SERVICES=(apache2 mysql mariadb nginx nodejs postgresql)
for service in "${CONFLICTING_SERVICES[@]}"; do
    if systemctl is-active --quiet $service 2>/dev/null; then
        warn "$service ƒëang ch·∫°y - c√≥ th·ªÉ xung ƒë·ªôt"
    else
        pass "$service kh√¥ng ch·∫°y"
    fi
done

# Ki·ªÉm tra firewall
echo -e "\n${BLUE}12. KI·ªÇM TRA FIREWALL${NC}"
if command -v ufw >/dev/null 2>&1; then
    UFW_STATUS=$(ufw status | head -1)
    if [[ "$UFW_STATUS" == *"inactive"* ]]; then
        pass "UFW firewall t·∫Øt (s·∫Ω ƒë∆∞·ª£c c·∫•u h√¨nh)"
    else
        warn "UFW firewall ƒëang ho·∫°t ƒë·ªông (c·∫ßn ki·ªÉm tra rules)"
    fi
else
    warn "UFW ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t (s·∫Ω ƒë∆∞·ª£c c√†i t·ª± ƒë·ªông)"
fi

# Ki·ªÉm tra package.json
echo -e "\n${BLUE}13. KI·ªÇM TRA SOURCE CODE${NC}"
if [[ -f "package.json" ]]; then
    pass "package.json c√≥ s·∫µn"
    if [[ -f "deploy-all-in-one.sh" ]]; then
        pass "Script tri·ªÉn khai c√≥ s·∫µn"
    else
        fail "Kh√¥ng t√¨m th·∫•y deploy-all-in-one.sh"
    fi
else
    fail "Kh√¥ng t√¨m th·∫•y package.json - Vui l√≤ng ch·∫°y t·ª´ th∆∞ m·ª•c source code"
fi

# T·ªïng k·∫øt
echo -e "\n${BLUE}============================================================================${NC}"
echo -e "${BLUE}                              T√ìM T·∫ÆT K·∫æT QU·∫¢${NC}"
echo -e "${BLUE}============================================================================${NC}"

echo -e "${GREEN}‚úì ƒê·∫°t y√™u c·∫ßu: $PASSED${NC}"
echo -e "${YELLOW}‚ö† C·∫£nh b√°o: $WARNINGS${NC}"
echo -e "${RED}‚úó L·ªói: $FAILED${NC}"

if [ "$FAILED" -eq 0 ]; then
    if [ "$WARNINGS" -eq 0 ]; then
        echo -e "\n${GREEN}üéâ H·ªÜ TH·ªêNG HO√ÄN H·∫¢O! S·∫µn s√†ng tri·ªÉn khai.${NC}"
        echo -e "${GREEN}Ch·∫°y l·ªánh: ./deploy-all-in-one.sh${NC}"
    else
        echo -e "\n${YELLOW}‚ö†Ô∏è  H·ªÜ TH·ªêNG C√ì TH·ªÇ TRI·ªÇN KHAI nh∆∞ng c√≥ m·ªôt s·ªë c·∫£nh b√°o.${NC}"
        echo -e "${YELLOW}Khuy·∫øn ngh·ªã xem x√©t c√°c c·∫£nh b√°o tr∆∞·ªõc khi tri·ªÉn khai.${NC}"
        echo -e "\n${BLUE}Ti·∫øp t·ª•c tri·ªÉn khai: ./deploy-all-in-one.sh${NC}"
    fi
else
    echo -e "\n${RED}‚ùå H·ªÜ TH·ªêNG CH∆ØA S·∫¥N S√ÄNG! C·∫ßn kh·∫Øc ph·ª•c c√°c l·ªói tr∆∞·ªõc.${NC}"
    echo -e "${RED}Vui l√≤ng kh·∫Øc ph·ª•c c√°c l·ªói ƒë·ªè v√† ch·∫°y l·∫°i script ki·ªÉm tra.${NC}"
fi

echo -e "\n${BLUE}Ghi ch√∫:${NC}"
echo -e "‚Ä¢ Script n√†y ch·ªâ ki·ªÉm tra y√™u c·∫ßu c∆° b·∫£n"
echo -e "‚Ä¢ M·ªôt s·ªë v·∫•n ƒë·ªÅ s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông kh·∫Øc ph·ª•c trong qu√° tr√¨nh tri·ªÉn khai"
echo -e "‚Ä¢ ƒê·∫£m b·∫£o domain name ƒë√£ tr·ªè v·ªÅ IP VPS tr∆∞·ªõc khi tri·ªÉn khai"

echo -e "\n${BLUE}============================================================================${NC}"